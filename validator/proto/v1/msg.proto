syntax = "proto3";

package chora.validator.v1;

import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/chora-io/mods/validator/types/v1";

// Msg is the Msg service.
service Msg {

  // AddValidator adds a validator (restricted to authority).
  rpc AddValidator(MsgAddValidator) returns (MsgAddValidatorResponse);

  // RemoveValidator removes a validator (restricted to authority).
  rpc RemoveValidator(MsgRemoveValidator) returns (MsgRemoveValidatorResponse);

  // UpdatePolicy updates the policy (restricted to authority).
  rpc UpdatePolicy(MsgUpdatePolicy) returns (MsgUpdatePolicyResponse);

  // UpdateValidator updates a validator (restricted to operator).
  rpc UpdateValidator(MsgUpdateValidator) returns (MsgUpdateValidatorResponse);
}

// MsgAddValidator is the Msg/AddValidator request type.
message MsgAddValidator {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the authority.
  string authority = 1;

  // address is the address of the validator.
  string address = 2;

  // operator is the address of the operator.
  string operator = 3;

  // metadata is the metadata of the validator.
  string metadata = 4;
}

// MsgAddValidatorResponse is the Msg/AddValidator response type.
message MsgAddValidatorResponse {

  // address is the address of the validator.
  string address = 1;
}

// MsgRemoveValidator is the Msg/RemoveValidator request type.
message MsgRemoveValidator {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the authority.
  string authority = 1;

  // address is the address of the validator.
  string address = 2;
}

// MsgRemoveValidatorResponse is the Msg/RemoveValidator response type.
message MsgRemoveValidatorResponse {

  // address is the address of the validator.
  string address = 1;
}

// MsgUpdatePolicy is the Msg/UpdatePolicy request type.
message MsgUpdatePolicy {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the authority.
  string authority = 1;

  // signed_blocks_window is the window within which a validator is expected to
  // sign a block.
  int64 signed_blocks_window = 2;

  // min_signed_per_window is the minimum number of signed blocks per signed
  // blocks window.
  int64 min_signed_per_window = 3;
}

// MsgUpdatePolicyResponse is the Msg/UpdatePolicy response type.
message MsgUpdatePolicyResponse {

  // signed_blocks_window is the window within which a validator is expected to
  // sign a block.
  int64 signed_blocks_window = 1;

  // min_signed_per_window is the minimum number of signed blocks per signed
  // blocks window.
  int64 min_signed_per_window = 2;
}

// MsgUpdateValidator is the Msg/UpdateValidator request type.
message MsgUpdateValidator {
  option (cosmos.msg.v1.signer) = "operator";

  // operator is the address of the operator.
  string operator = 1;

  // address is the address of the validator.
  string address = 2;

  // new_metadata is the new metadata of the validator.
  string new_metadata = 3;
}

// MsgUpdateValidatorResponse is the Msg/UpdateValidator response type.
message MsgUpdateValidatorResponse {

  // address is the address of the validator.
  string address = 1;
}
