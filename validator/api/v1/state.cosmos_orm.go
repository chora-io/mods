// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package validatorv1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

// singleton store
type PolicyTable interface {
	Get(ctx context.Context) (*Policy, error)
	Save(ctx context.Context, policy *Policy) error
}

type policyTable struct {
	table ormtable.Table
}

var _ PolicyTable = policyTable{}

func (x policyTable) Get(ctx context.Context) (*Policy, error) {
	policy := &Policy{}
	_, err := x.table.Get(ctx, policy)
	return policy, err
}

func (x policyTable) Save(ctx context.Context, policy *Policy) error {
	return x.table.Save(ctx, policy)
}

func NewPolicyTable(db ormtable.Schema) (PolicyTable, error) {
	table := db.GetTable(&Policy{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Policy{}).ProtoReflect().Descriptor().FullName()))
	}
	return &policyTable{table}, nil
}

type ValidatorTable interface {
	Insert(ctx context.Context, validator *Validator) error
	Update(ctx context.Context, validator *Validator) error
	Save(ctx context.Context, validator *Validator) error
	Delete(ctx context.Context, validator *Validator) error
	Has(ctx context.Context, address string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address string) (*Validator, error)
	List(ctx context.Context, prefixKey ValidatorIndexKey, opts ...ormlist.Option) (ValidatorIterator, error)
	ListRange(ctx context.Context, from, to ValidatorIndexKey, opts ...ormlist.Option) (ValidatorIterator, error)
	DeleteBy(ctx context.Context, prefixKey ValidatorIndexKey) error
	DeleteRange(ctx context.Context, from, to ValidatorIndexKey) error

	doNotImplement()
}

type ValidatorIterator struct {
	ormtable.Iterator
}

func (i ValidatorIterator) Value() (*Validator, error) {
	var validator Validator
	err := i.UnmarshalMessage(&validator)
	return &validator, err
}

type ValidatorIndexKey interface {
	id() uint32
	values() []interface{}
	validatorIndexKey()
}

// primary key starting index..
type ValidatorPrimaryKey = ValidatorAddressIndexKey

type ValidatorAddressIndexKey struct {
	vs []interface{}
}

func (x ValidatorAddressIndexKey) id() uint32            { return 0 }
func (x ValidatorAddressIndexKey) values() []interface{} { return x.vs }
func (x ValidatorAddressIndexKey) validatorIndexKey()    {}

func (this ValidatorAddressIndexKey) WithAddress(address string) ValidatorAddressIndexKey {
	this.vs = []interface{}{address}
	return this
}

type ValidatorOperatorIndexKey struct {
	vs []interface{}
}

func (x ValidatorOperatorIndexKey) id() uint32            { return 1 }
func (x ValidatorOperatorIndexKey) values() []interface{} { return x.vs }
func (x ValidatorOperatorIndexKey) validatorIndexKey()    {}

func (this ValidatorOperatorIndexKey) WithOperator(operator string) ValidatorOperatorIndexKey {
	this.vs = []interface{}{operator}
	return this
}

type validatorTable struct {
	table ormtable.Table
}

func (this validatorTable) Insert(ctx context.Context, validator *Validator) error {
	return this.table.Insert(ctx, validator)
}

func (this validatorTable) Update(ctx context.Context, validator *Validator) error {
	return this.table.Update(ctx, validator)
}

func (this validatorTable) Save(ctx context.Context, validator *Validator) error {
	return this.table.Save(ctx, validator)
}

func (this validatorTable) Delete(ctx context.Context, validator *Validator) error {
	return this.table.Delete(ctx, validator)
}

func (this validatorTable) Has(ctx context.Context, address string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, address)
}

func (this validatorTable) Get(ctx context.Context, address string) (*Validator, error) {
	var validator Validator
	found, err := this.table.PrimaryKey().Get(ctx, &validator, address)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &validator, nil
}

func (this validatorTable) List(ctx context.Context, prefixKey ValidatorIndexKey, opts ...ormlist.Option) (ValidatorIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ValidatorIterator{it}, err
}

func (this validatorTable) ListRange(ctx context.Context, from, to ValidatorIndexKey, opts ...ormlist.Option) (ValidatorIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ValidatorIterator{it}, err
}

func (this validatorTable) DeleteBy(ctx context.Context, prefixKey ValidatorIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this validatorTable) DeleteRange(ctx context.Context, from, to ValidatorIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this validatorTable) doNotImplement() {}

var _ ValidatorTable = validatorTable{}

func NewValidatorTable(db ormtable.Schema) (ValidatorTable, error) {
	table := db.GetTable(&Validator{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Validator{}).ProtoReflect().Descriptor().FullName()))
	}
	return validatorTable{table}, nil
}

type ValidatorSigningInfoTable interface {
	Insert(ctx context.Context, validatorSigningInfo *ValidatorSigningInfo) error
	Update(ctx context.Context, validatorSigningInfo *ValidatorSigningInfo) error
	Save(ctx context.Context, validatorSigningInfo *ValidatorSigningInfo) error
	Delete(ctx context.Context, validatorSigningInfo *ValidatorSigningInfo) error
	Has(ctx context.Context, address string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address string) (*ValidatorSigningInfo, error)
	List(ctx context.Context, prefixKey ValidatorSigningInfoIndexKey, opts ...ormlist.Option) (ValidatorSigningInfoIterator, error)
	ListRange(ctx context.Context, from, to ValidatorSigningInfoIndexKey, opts ...ormlist.Option) (ValidatorSigningInfoIterator, error)
	DeleteBy(ctx context.Context, prefixKey ValidatorSigningInfoIndexKey) error
	DeleteRange(ctx context.Context, from, to ValidatorSigningInfoIndexKey) error

	doNotImplement()
}

type ValidatorSigningInfoIterator struct {
	ormtable.Iterator
}

func (i ValidatorSigningInfoIterator) Value() (*ValidatorSigningInfo, error) {
	var validatorSigningInfo ValidatorSigningInfo
	err := i.UnmarshalMessage(&validatorSigningInfo)
	return &validatorSigningInfo, err
}

type ValidatorSigningInfoIndexKey interface {
	id() uint32
	values() []interface{}
	validatorSigningInfoIndexKey()
}

// primary key starting index..
type ValidatorSigningInfoPrimaryKey = ValidatorSigningInfoAddressIndexKey

type ValidatorSigningInfoAddressIndexKey struct {
	vs []interface{}
}

func (x ValidatorSigningInfoAddressIndexKey) id() uint32                    { return 0 }
func (x ValidatorSigningInfoAddressIndexKey) values() []interface{}         { return x.vs }
func (x ValidatorSigningInfoAddressIndexKey) validatorSigningInfoIndexKey() {}

func (this ValidatorSigningInfoAddressIndexKey) WithAddress(address string) ValidatorSigningInfoAddressIndexKey {
	this.vs = []interface{}{address}
	return this
}

type validatorSigningInfoTable struct {
	table ormtable.Table
}

func (this validatorSigningInfoTable) Insert(ctx context.Context, validatorSigningInfo *ValidatorSigningInfo) error {
	return this.table.Insert(ctx, validatorSigningInfo)
}

func (this validatorSigningInfoTable) Update(ctx context.Context, validatorSigningInfo *ValidatorSigningInfo) error {
	return this.table.Update(ctx, validatorSigningInfo)
}

func (this validatorSigningInfoTable) Save(ctx context.Context, validatorSigningInfo *ValidatorSigningInfo) error {
	return this.table.Save(ctx, validatorSigningInfo)
}

func (this validatorSigningInfoTable) Delete(ctx context.Context, validatorSigningInfo *ValidatorSigningInfo) error {
	return this.table.Delete(ctx, validatorSigningInfo)
}

func (this validatorSigningInfoTable) Has(ctx context.Context, address string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, address)
}

func (this validatorSigningInfoTable) Get(ctx context.Context, address string) (*ValidatorSigningInfo, error) {
	var validatorSigningInfo ValidatorSigningInfo
	found, err := this.table.PrimaryKey().Get(ctx, &validatorSigningInfo, address)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &validatorSigningInfo, nil
}

func (this validatorSigningInfoTable) List(ctx context.Context, prefixKey ValidatorSigningInfoIndexKey, opts ...ormlist.Option) (ValidatorSigningInfoIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ValidatorSigningInfoIterator{it}, err
}

func (this validatorSigningInfoTable) ListRange(ctx context.Context, from, to ValidatorSigningInfoIndexKey, opts ...ormlist.Option) (ValidatorSigningInfoIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ValidatorSigningInfoIterator{it}, err
}

func (this validatorSigningInfoTable) DeleteBy(ctx context.Context, prefixKey ValidatorSigningInfoIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this validatorSigningInfoTable) DeleteRange(ctx context.Context, from, to ValidatorSigningInfoIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this validatorSigningInfoTable) doNotImplement() {}

var _ ValidatorSigningInfoTable = validatorSigningInfoTable{}

func NewValidatorSigningInfoTable(db ormtable.Schema) (ValidatorSigningInfoTable, error) {
	table := db.GetTable(&ValidatorSigningInfo{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&ValidatorSigningInfo{}).ProtoReflect().Descriptor().FullName()))
	}
	return validatorSigningInfoTable{table}, nil
}

type StateStore interface {
	PolicyTable() PolicyTable
	ValidatorTable() ValidatorTable
	ValidatorSigningInfoTable() ValidatorSigningInfoTable

	doNotImplement()
}

type stateStore struct {
	policy               PolicyTable
	validator            ValidatorTable
	validatorSigningInfo ValidatorSigningInfoTable
}

func (x stateStore) PolicyTable() PolicyTable {
	return x.policy
}

func (x stateStore) ValidatorTable() ValidatorTable {
	return x.validator
}

func (x stateStore) ValidatorSigningInfoTable() ValidatorSigningInfoTable {
	return x.validatorSigningInfo
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	policyTable, err := NewPolicyTable(db)
	if err != nil {
		return nil, err
	}

	validatorTable, err := NewValidatorTable(db)
	if err != nil {
		return nil, err
	}

	validatorSigningInfoTable, err := NewValidatorSigningInfoTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		policyTable,
		validatorTable,
		validatorSigningInfoTable,
	}, nil
}
