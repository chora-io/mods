syntax = "proto3";

package chora.geonode.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";

option go_package = "github.com/choraio/mods/geonode/types/v1";

// Query is the geonode Query service.
service Query {

  // Node queries a node by the unique identifier of the node.
  rpc Node(QueryNodeRequest) returns (QueryNodeResponse) {
    option (google.api.http).get = "/chora/geonode/v1/node/{id}";
  }

  // NodeByCurator queries nodes by the curator of the nodes.
  rpc NodeByCurator(QueryNodeByCuratorRequest)
      returns (QueryNodeByCuratorResponse) {
    option (google.api.http).get =
        "/chora/geonode/v1/node-by-curator/{curator}";
  }
}

// QueryNodeRequest is the Query/Node request type.
message QueryNodeRequest {

  // id is the unique identifier of the node.
  uint64 id = 1;
}

// QueryNodeResponse is the Query/Node response type.
message QueryNodeResponse {

  // id is the unique identifier of the node.
  uint64 id = 1;

  // curator is the curator of the node.
  string curator = 2;

  // metadata is the metadata of the node.
  string metadata = 3;
}

// QueryNodeByCuratorRequest is the Query/NodeByCurator request type.
message QueryNodeByCuratorRequest {

  // curator is the address of the node curator.
  string curator = 1;

  // pagination is the optional pagination of the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryNodeByCuratorResponse is the Query/NodeByCurator response type.
message QueryNodeByCuratorResponse {

  // curator is the address of the node curator.
  string curator = 1;

  // node is the node managed by the curator.
  repeated Node nodes = 2;

  // pagination is the pagination of the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 3;

  // Node is the node properties.
  message Node {

    // id is the unique identifier of the node.
    uint64 id = 1;

    // metadata is the metadata of the node.
    string metadata = 2;
  }
}
