// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package agentv1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type AgentTable interface {
	Insert(ctx context.Context, agent *Agent) error
	Update(ctx context.Context, agent *Agent) error
	Save(ctx context.Context, agent *Agent) error
	Delete(ctx context.Context, agent *Agent) error
	Has(ctx context.Context, address []byte) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address []byte) (*Agent, error)
	List(ctx context.Context, prefixKey AgentIndexKey, opts ...ormlist.Option) (AgentIterator, error)
	ListRange(ctx context.Context, from, to AgentIndexKey, opts ...ormlist.Option) (AgentIterator, error)
	DeleteBy(ctx context.Context, prefixKey AgentIndexKey) error
	DeleteRange(ctx context.Context, from, to AgentIndexKey) error

	doNotImplement()
}

type AgentIterator struct {
	ormtable.Iterator
}

func (i AgentIterator) Value() (*Agent, error) {
	var agent Agent
	err := i.UnmarshalMessage(&agent)
	return &agent, err
}

type AgentIndexKey interface {
	id() uint32
	values() []interface{}
	agentIndexKey()
}

// primary key starting index..
type AgentPrimaryKey = AgentAddressIndexKey

type AgentAddressIndexKey struct {
	vs []interface{}
}

func (x AgentAddressIndexKey) id() uint32            { return 0 }
func (x AgentAddressIndexKey) values() []interface{} { return x.vs }
func (x AgentAddressIndexKey) agentIndexKey()        {}

func (this AgentAddressIndexKey) WithAddress(address []byte) AgentAddressIndexKey {
	this.vs = []interface{}{address}
	return this
}

type AgentAdminIndexKey struct {
	vs []interface{}
}

func (x AgentAdminIndexKey) id() uint32            { return 1 }
func (x AgentAdminIndexKey) values() []interface{} { return x.vs }
func (x AgentAdminIndexKey) agentIndexKey()        {}

func (this AgentAdminIndexKey) WithAdmin(admin []byte) AgentAdminIndexKey {
	this.vs = []interface{}{admin}
	return this
}

type agentTable struct {
	table ormtable.Table
}

func (this agentTable) Insert(ctx context.Context, agent *Agent) error {
	return this.table.Insert(ctx, agent)
}

func (this agentTable) Update(ctx context.Context, agent *Agent) error {
	return this.table.Update(ctx, agent)
}

func (this agentTable) Save(ctx context.Context, agent *Agent) error {
	return this.table.Save(ctx, agent)
}

func (this agentTable) Delete(ctx context.Context, agent *Agent) error {
	return this.table.Delete(ctx, agent)
}

func (this agentTable) Has(ctx context.Context, address []byte) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, address)
}

func (this agentTable) Get(ctx context.Context, address []byte) (*Agent, error) {
	var agent Agent
	found, err := this.table.PrimaryKey().Get(ctx, &agent, address)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &agent, nil
}

func (this agentTable) List(ctx context.Context, prefixKey AgentIndexKey, opts ...ormlist.Option) (AgentIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AgentIterator{it}, err
}

func (this agentTable) ListRange(ctx context.Context, from, to AgentIndexKey, opts ...ormlist.Option) (AgentIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AgentIterator{it}, err
}

func (this agentTable) DeleteBy(ctx context.Context, prefixKey AgentIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this agentTable) DeleteRange(ctx context.Context, from, to AgentIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this agentTable) doNotImplement() {}

var _ AgentTable = agentTable{}

func NewAgentTable(db ormtable.Schema) (AgentTable, error) {
	table := db.GetTable(&Agent{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Agent{}).ProtoReflect().Descriptor().FullName()))
	}
	return agentTable{table}, nil
}

// singleton store
type AgentSequenceTable interface {
	Get(ctx context.Context) (*AgentSequence, error)
	Save(ctx context.Context, agentSequence *AgentSequence) error
}

type agentSequenceTable struct {
	table ormtable.Table
}

var _ AgentSequenceTable = agentSequenceTable{}

func (x agentSequenceTable) Get(ctx context.Context) (*AgentSequence, error) {
	agentSequence := &AgentSequence{}
	_, err := x.table.Get(ctx, agentSequence)
	return agentSequence, err
}

func (x agentSequenceTable) Save(ctx context.Context, agentSequence *AgentSequence) error {
	return x.table.Save(ctx, agentSequence)
}

func NewAgentSequenceTable(db ormtable.Schema) (AgentSequenceTable, error) {
	table := db.GetTable(&AgentSequence{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&AgentSequence{}).ProtoReflect().Descriptor().FullName()))
	}
	return &agentSequenceTable{table}, nil
}

type StateStore interface {
	AgentTable() AgentTable
	AgentSequenceTable() AgentSequenceTable

	doNotImplement()
}

type stateStore struct {
	agent         AgentTable
	agentSequence AgentSequenceTable
}

func (x stateStore) AgentTable() AgentTable {
	return x.agent
}

func (x stateStore) AgentSequenceTable() AgentSequenceTable {
	return x.agentSequence
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	agentTable, err := NewAgentTable(db)
	if err != nil {
		return nil, err
	}

	agentSequenceTable, err := NewAgentSequenceTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		agentTable,
		agentSequenceTable,
	}, nil
}
