// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package authorityv1

import (
	context "context"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

// singleton store
type AuthorityTable interface {
	Get(ctx context.Context) (*Authority, error)
	Save(ctx context.Context, authority *Authority) error
}

type authorityTable struct {
	table ormtable.Table
}

var _ AuthorityTable = authorityTable{}

func (x authorityTable) Get(ctx context.Context) (*Authority, error) {
	authority := &Authority{}
	_, err := x.table.Get(ctx, authority)
	return authority, err
}

func (x authorityTable) Save(ctx context.Context, authority *Authority) error {
	return x.table.Save(ctx, authority)
}

func NewAuthorityTable(db ormtable.Schema) (AuthorityTable, error) {
	table := db.GetTable(&Authority{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Authority{}).ProtoReflect().Descriptor().FullName()))
	}
	return &authorityTable{table}, nil
}

type StateStore interface {
	AuthorityTable() AuthorityTable

	doNotImplement()
}

type stateStore struct {
	authority AuthorityTable
}

func (x stateStore) AuthorityTable() AuthorityTable {
	return x.authority
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	authorityTable, err := NewAuthorityTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		authorityTable,
	}, nil
}
