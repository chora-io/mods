syntax = "proto3";

package chora.ecosystem.v1;

import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/chora-io/mods/ecosystem/types/v1";

// Msg is the Msg service.
service Msg {

  // Create creates a node.
  rpc Create(MsgCreate) returns (MsgCreateResponse);

  // UpdateCurator updates the curator of a node.
  rpc UpdateCurator(MsgUpdateCurator) returns (MsgUpdateCuratorResponse);

  // UpdateMetadata updates the metadata of a node.
  rpc UpdateMetadata(MsgUpdateMetadata) returns (MsgUpdateMetadataResponse);
}

// MsgCreate is the Msg/Create request type.
message MsgCreate {
  option (cosmos.msg.v1.signer) = "curator";

  // curator is the address of the node curator.
  string curator = 1;

  // metadata is the metadata of the node.
  string metadata = 2;
}

// MsgCreateResponse is the Msg/Create response type.
message MsgCreateResponse {

  // id is the unique identifier of the node.
  uint64 id = 1;
}

// MsgUpdateCurator is the Msg/UpdateCurator request type.
message MsgUpdateCurator {
  option (cosmos.msg.v1.signer) = "curator";

  // id is the unique identifier of the node.
  uint64 id = 1;

  // curator is the address of the node curator.
  string curator = 2;

  // new_curator is the address of the new curator.
  string new_curator = 3;
}

// MsgUpdateCuratorResponse is the Msg/UpdateCurator response type.
message MsgUpdateCuratorResponse {

  // id is the unique identifier of the node.
  uint64 id = 1;
}

// MsgUpdateMetadata is the Msg/UpdateMetadata request type.
message MsgUpdateMetadata {
  option (cosmos.msg.v1.signer) = "curator";

  // id is the unique identifier of the node.
  uint64 id = 1;

  // curator is the address of the node curator.
  string curator = 2;

  // new_metadata is the new metadata of the node.
  string new_metadata = 3;
}

// MsgUpdateMetadataResponse is the Msg/UpdateMetadata response type.
message MsgUpdateMetadataResponse {

  // id is the unique identifier of the node.
  uint64 id = 1;
}
