// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package voucherv1

import (
	context "context"
	ormlist "github.com/cosmos/cosmos-sdk/orm/model/ormlist"
	ormtable "github.com/cosmos/cosmos-sdk/orm/model/ormtable"
	ormerrors "github.com/cosmos/cosmos-sdk/orm/types/ormerrors"
)

type VoucherTable interface {
	Insert(ctx context.Context, voucher *Voucher) error
	InsertReturningID(ctx context.Context, voucher *Voucher) (uint64, error)
	Update(ctx context.Context, voucher *Voucher) error
	Save(ctx context.Context, voucher *Voucher) error
	Delete(ctx context.Context, voucher *Voucher) error
	Has(ctx context.Context, id uint64) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id uint64) (*Voucher, error)
	List(ctx context.Context, prefixKey VoucherIndexKey, opts ...ormlist.Option) (VoucherIterator, error)
	ListRange(ctx context.Context, from, to VoucherIndexKey, opts ...ormlist.Option) (VoucherIterator, error)
	DeleteBy(ctx context.Context, prefixKey VoucherIndexKey) error
	DeleteRange(ctx context.Context, from, to VoucherIndexKey) error

	doNotImplement()
}

type VoucherIterator struct {
	ormtable.Iterator
}

func (i VoucherIterator) Value() (*Voucher, error) {
	var voucher Voucher
	err := i.UnmarshalMessage(&voucher)
	return &voucher, err
}

type VoucherIndexKey interface {
	id() uint32
	values() []interface{}
	voucherIndexKey()
}

// primary key starting index..
type VoucherPrimaryKey = VoucherIdIndexKey

type VoucherIdIndexKey struct {
	vs []interface{}
}

func (x VoucherIdIndexKey) id() uint32            { return 0 }
func (x VoucherIdIndexKey) values() []interface{} { return x.vs }
func (x VoucherIdIndexKey) voucherIndexKey()      {}

func (this VoucherIdIndexKey) WithId(id uint64) VoucherIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type VoucherIssuerIndexKey struct {
	vs []interface{}
}

func (x VoucherIssuerIndexKey) id() uint32            { return 1 }
func (x VoucherIssuerIndexKey) values() []interface{} { return x.vs }
func (x VoucherIssuerIndexKey) voucherIndexKey()      {}

func (this VoucherIssuerIndexKey) WithIssuer(issuer []byte) VoucherIssuerIndexKey {
	this.vs = []interface{}{issuer}
	return this
}

type voucherTable struct {
	table ormtable.AutoIncrementTable
}

func (this voucherTable) Insert(ctx context.Context, voucher *Voucher) error {
	return this.table.Insert(ctx, voucher)
}

func (this voucherTable) Update(ctx context.Context, voucher *Voucher) error {
	return this.table.Update(ctx, voucher)
}

func (this voucherTable) Save(ctx context.Context, voucher *Voucher) error {
	return this.table.Save(ctx, voucher)
}

func (this voucherTable) Delete(ctx context.Context, voucher *Voucher) error {
	return this.table.Delete(ctx, voucher)
}

func (this voucherTable) InsertReturningID(ctx context.Context, voucher *Voucher) (uint64, error) {
	return this.table.InsertReturningID(ctx, voucher)
}

func (this voucherTable) Has(ctx context.Context, id uint64) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this voucherTable) Get(ctx context.Context, id uint64) (*Voucher, error) {
	var voucher Voucher
	found, err := this.table.PrimaryKey().Get(ctx, &voucher, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &voucher, nil
}

func (this voucherTable) List(ctx context.Context, prefixKey VoucherIndexKey, opts ...ormlist.Option) (VoucherIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return VoucherIterator{it}, err
}

func (this voucherTable) ListRange(ctx context.Context, from, to VoucherIndexKey, opts ...ormlist.Option) (VoucherIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return VoucherIterator{it}, err
}

func (this voucherTable) DeleteBy(ctx context.Context, prefixKey VoucherIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this voucherTable) DeleteRange(ctx context.Context, from, to VoucherIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this voucherTable) doNotImplement() {}

var _ VoucherTable = voucherTable{}

func NewVoucherTable(db ormtable.Schema) (VoucherTable, error) {
	table := db.GetTable(&Voucher{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Voucher{}).ProtoReflect().Descriptor().FullName()))
	}
	return voucherTable{table.(ormtable.AutoIncrementTable)}, nil
}

type StateStore interface {
	VoucherTable() VoucherTable

	doNotImplement()
}

type stateStore struct {
	voucher VoucherTable
}

func (x stateStore) VoucherTable() VoucherTable {
	return x.voucher
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	voucherTable, err := NewVoucherTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		voucherTable,
	}, nil
}
