// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: chora/subject/v1/query.proto

package subjectv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_Subject_FullMethodName           = "/chora.subject.v1.Query/Subject"
	Query_Subjects_FullMethodName          = "/chora.subject.v1.Query/Subjects"
	Query_SubjectsBySteward_FullMethodName = "/chora.subject.v1.Query/SubjectsBySteward"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query is the Query service.
type QueryClient interface {
	// Subject queries an subject by address.
	Subject(ctx context.Context, in *QuerySubjectRequest, opts ...grpc.CallOption) (*QuerySubjectResponse, error)
	// Subjects queries all subjects.
	Subjects(ctx context.Context, in *QuerySubjectsRequest, opts ...grpc.CallOption) (*QuerySubjectsResponse, error)
	// SubjectsBySteward queries subjects by steward.
	SubjectsBySteward(ctx context.Context, in *QuerySubjectsByStewardRequest, opts ...grpc.CallOption) (*QuerySubjectsByStewardResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Subject(ctx context.Context, in *QuerySubjectRequest, opts ...grpc.CallOption) (*QuerySubjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubjectResponse)
	err := c.cc.Invoke(ctx, Query_Subject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Subjects(ctx context.Context, in *QuerySubjectsRequest, opts ...grpc.CallOption) (*QuerySubjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubjectsResponse)
	err := c.cc.Invoke(ctx, Query_Subjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectsBySteward(ctx context.Context, in *QuerySubjectsByStewardRequest, opts ...grpc.CallOption) (*QuerySubjectsByStewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubjectsByStewardResponse)
	err := c.cc.Invoke(ctx, Query_SubjectsBySteward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query is the Query service.
type QueryServer interface {
	// Subject queries an subject by address.
	Subject(context.Context, *QuerySubjectRequest) (*QuerySubjectResponse, error)
	// Subjects queries all subjects.
	Subjects(context.Context, *QuerySubjectsRequest) (*QuerySubjectsResponse, error)
	// SubjectsBySteward queries subjects by steward.
	SubjectsBySteward(context.Context, *QuerySubjectsByStewardRequest) (*QuerySubjectsByStewardResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Subject(context.Context, *QuerySubjectRequest) (*QuerySubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subject not implemented")
}
func (UnimplementedQueryServer) Subjects(context.Context, *QuerySubjectsRequest) (*QuerySubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subjects not implemented")
}
func (UnimplementedQueryServer) SubjectsBySteward(context.Context, *QuerySubjectsByStewardRequest) (*QuerySubjectsByStewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectsBySteward not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Subject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Subject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subject(ctx, req.(*QuerySubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Subjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Subjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subjects(ctx, req.(*QuerySubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectsBySteward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectsByStewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectsBySteward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubjectsBySteward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectsBySteward(ctx, req.(*QuerySubjectsByStewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chora.subject.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subject",
			Handler:    _Query_Subject_Handler,
		},
		{
			MethodName: "Subjects",
			Handler:    _Query_Subjects_Handler,
		},
		{
			MethodName: "SubjectsBySteward",
			Handler:    _Query_SubjectsBySteward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chora/subject/v1/query.proto",
}
