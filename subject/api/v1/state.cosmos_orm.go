// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package subjectv1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type SubjectTable interface {
	Insert(ctx context.Context, subject *Subject) error
	Update(ctx context.Context, subject *Subject) error
	Save(ctx context.Context, subject *Subject) error
	Delete(ctx context.Context, subject *Subject) error
	Has(ctx context.Context, address []byte) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, address []byte) (*Subject, error)
	List(ctx context.Context, prefixKey SubjectIndexKey, opts ...ormlist.Option) (SubjectIterator, error)
	ListRange(ctx context.Context, from, to SubjectIndexKey, opts ...ormlist.Option) (SubjectIterator, error)
	DeleteBy(ctx context.Context, prefixKey SubjectIndexKey) error
	DeleteRange(ctx context.Context, from, to SubjectIndexKey) error

	doNotImplement()
}

type SubjectIterator struct {
	ormtable.Iterator
}

func (i SubjectIterator) Value() (*Subject, error) {
	var subject Subject
	err := i.UnmarshalMessage(&subject)
	return &subject, err
}

type SubjectIndexKey interface {
	id() uint32
	values() []interface{}
	subjectIndexKey()
}

// primary key starting index..
type SubjectPrimaryKey = SubjectAddressIndexKey

type SubjectAddressIndexKey struct {
	vs []interface{}
}

func (x SubjectAddressIndexKey) id() uint32            { return 0 }
func (x SubjectAddressIndexKey) values() []interface{} { return x.vs }
func (x SubjectAddressIndexKey) subjectIndexKey()      {}

func (this SubjectAddressIndexKey) WithAddress(address []byte) SubjectAddressIndexKey {
	this.vs = []interface{}{address}
	return this
}

type SubjectStewardIndexKey struct {
	vs []interface{}
}

func (x SubjectStewardIndexKey) id() uint32            { return 1 }
func (x SubjectStewardIndexKey) values() []interface{} { return x.vs }
func (x SubjectStewardIndexKey) subjectIndexKey()      {}

func (this SubjectStewardIndexKey) WithSteward(steward []byte) SubjectStewardIndexKey {
	this.vs = []interface{}{steward}
	return this
}

type subjectTable struct {
	table ormtable.Table
}

func (this subjectTable) Insert(ctx context.Context, subject *Subject) error {
	return this.table.Insert(ctx, subject)
}

func (this subjectTable) Update(ctx context.Context, subject *Subject) error {
	return this.table.Update(ctx, subject)
}

func (this subjectTable) Save(ctx context.Context, subject *Subject) error {
	return this.table.Save(ctx, subject)
}

func (this subjectTable) Delete(ctx context.Context, subject *Subject) error {
	return this.table.Delete(ctx, subject)
}

func (this subjectTable) Has(ctx context.Context, address []byte) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, address)
}

func (this subjectTable) Get(ctx context.Context, address []byte) (*Subject, error) {
	var subject Subject
	found, err := this.table.PrimaryKey().Get(ctx, &subject, address)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &subject, nil
}

func (this subjectTable) List(ctx context.Context, prefixKey SubjectIndexKey, opts ...ormlist.Option) (SubjectIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return SubjectIterator{it}, err
}

func (this subjectTable) ListRange(ctx context.Context, from, to SubjectIndexKey, opts ...ormlist.Option) (SubjectIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return SubjectIterator{it}, err
}

func (this subjectTable) DeleteBy(ctx context.Context, prefixKey SubjectIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this subjectTable) DeleteRange(ctx context.Context, from, to SubjectIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this subjectTable) doNotImplement() {}

var _ SubjectTable = subjectTable{}

func NewSubjectTable(db ormtable.Schema) (SubjectTable, error) {
	table := db.GetTable(&Subject{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Subject{}).ProtoReflect().Descriptor().FullName()))
	}
	return subjectTable{table}, nil
}

// singleton store
type SubjectSequenceTable interface {
	Get(ctx context.Context) (*SubjectSequence, error)
	Save(ctx context.Context, subjectSequence *SubjectSequence) error
}

type subjectSequenceTable struct {
	table ormtable.Table
}

var _ SubjectSequenceTable = subjectSequenceTable{}

func (x subjectSequenceTable) Get(ctx context.Context) (*SubjectSequence, error) {
	subjectSequence := &SubjectSequence{}
	_, err := x.table.Get(ctx, subjectSequence)
	return subjectSequence, err
}

func (x subjectSequenceTable) Save(ctx context.Context, subjectSequence *SubjectSequence) error {
	return x.table.Save(ctx, subjectSequence)
}

func NewSubjectSequenceTable(db ormtable.Schema) (SubjectSequenceTable, error) {
	table := db.GetTable(&SubjectSequence{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&SubjectSequence{}).ProtoReflect().Descriptor().FullName()))
	}
	return &subjectSequenceTable{table}, nil
}

type StateStore interface {
	SubjectTable() SubjectTable
	SubjectSequenceTable() SubjectSequenceTable

	doNotImplement()
}

type stateStore struct {
	subject         SubjectTable
	subjectSequence SubjectSequenceTable
}

func (x stateStore) SubjectTable() SubjectTable {
	return x.subject
}

func (x stateStore) SubjectSequenceTable() SubjectSequenceTable {
	return x.subjectSequence
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	subjectTable, err := NewSubjectTable(db)
	if err != nil {
		return nil, err
	}

	subjectSequenceTable, err := NewSubjectSequenceTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		subjectTable,
		subjectSequenceTable,
	}, nil
}
