// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chora/subject/v1/query.proto

package v1

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QuerySubjectRequest is the Query/Subject request type.
type QuerySubjectRequest struct {
	// address is the address of the subject.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QuerySubjectRequest) Reset()         { *m = QuerySubjectRequest{} }
func (m *QuerySubjectRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectRequest) ProtoMessage()    {}
func (*QuerySubjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ecf46bf2d90f7b, []int{0}
}
func (m *QuerySubjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectRequest.Merge(m, src)
}
func (m *QuerySubjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectRequest proto.InternalMessageInfo

func (m *QuerySubjectRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QuerySubjectResponse is the Query/Subject response type.
type QuerySubjectResponse struct {
	// address is the address of the subject.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// steward is the address of the subject steward.
	Steward string `protobuf:"bytes,2,opt,name=steward,proto3" json:"steward,omitempty"`
	// metadata is the metadata of the subject.
	Metadata string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *QuerySubjectResponse) Reset()         { *m = QuerySubjectResponse{} }
func (m *QuerySubjectResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectResponse) ProtoMessage()    {}
func (*QuerySubjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ecf46bf2d90f7b, []int{1}
}
func (m *QuerySubjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectResponse.Merge(m, src)
}
func (m *QuerySubjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectResponse proto.InternalMessageInfo

func (m *QuerySubjectResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QuerySubjectResponse) GetSteward() string {
	if m != nil {
		return m.Steward
	}
	return ""
}

func (m *QuerySubjectResponse) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// QuerySubjectsRequest is the Query/Subjects request type.
type QuerySubjectsRequest struct {
	// pagination is the optional pagination of the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubjectsRequest) Reset()         { *m = QuerySubjectsRequest{} }
func (m *QuerySubjectsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsRequest) ProtoMessage()    {}
func (*QuerySubjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ecf46bf2d90f7b, []int{2}
}
func (m *QuerySubjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsRequest.Merge(m, src)
}
func (m *QuerySubjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsRequest proto.InternalMessageInfo

func (m *QuerySubjectsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySubjectsResponse is the Query/Subjects response type.
type QuerySubjectsResponse struct {
	// subjects is the list of subjects.
	Subjects []*QuerySubjectsResponse_Subject `protobuf:"bytes,1,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// pagination is the pagination of the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubjectsResponse) Reset()         { *m = QuerySubjectsResponse{} }
func (m *QuerySubjectsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsResponse) ProtoMessage()    {}
func (*QuerySubjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ecf46bf2d90f7b, []int{3}
}
func (m *QuerySubjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsResponse.Merge(m, src)
}
func (m *QuerySubjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsResponse proto.InternalMessageInfo

func (m *QuerySubjectsResponse) GetSubjects() []*QuerySubjectsResponse_Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *QuerySubjectsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Subject is the subject properties.
type QuerySubjectsResponse_Subject struct {
	// address is the address of the subject.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// steward is the address of the subject steward.
	Steward string `protobuf:"bytes,2,opt,name=steward,proto3" json:"steward,omitempty"`
	// metadata is the metadata of the subject.
	Metadata string `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *QuerySubjectsResponse_Subject) Reset()         { *m = QuerySubjectsResponse_Subject{} }
func (m *QuerySubjectsResponse_Subject) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsResponse_Subject) ProtoMessage()    {}
func (*QuerySubjectsResponse_Subject) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ecf46bf2d90f7b, []int{3, 0}
}
func (m *QuerySubjectsResponse_Subject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsResponse_Subject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsResponse_Subject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsResponse_Subject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsResponse_Subject.Merge(m, src)
}
func (m *QuerySubjectsResponse_Subject) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsResponse_Subject) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsResponse_Subject.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsResponse_Subject proto.InternalMessageInfo

func (m *QuerySubjectsResponse_Subject) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QuerySubjectsResponse_Subject) GetSteward() string {
	if m != nil {
		return m.Steward
	}
	return ""
}

func (m *QuerySubjectsResponse_Subject) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

// QuerySubjectsByStewardRequest is the Query/SubjectsBySteward request type.
type QuerySubjectsByStewardRequest struct {
	// steward is the address of the subject steward.
	Steward string `protobuf:"bytes,1,opt,name=steward,proto3" json:"steward,omitempty"`
	// pagination is the optional pagination of the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubjectsByStewardRequest) Reset()         { *m = QuerySubjectsByStewardRequest{} }
func (m *QuerySubjectsByStewardRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsByStewardRequest) ProtoMessage()    {}
func (*QuerySubjectsByStewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ecf46bf2d90f7b, []int{4}
}
func (m *QuerySubjectsByStewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsByStewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsByStewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsByStewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsByStewardRequest.Merge(m, src)
}
func (m *QuerySubjectsByStewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsByStewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsByStewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsByStewardRequest proto.InternalMessageInfo

func (m *QuerySubjectsByStewardRequest) GetSteward() string {
	if m != nil {
		return m.Steward
	}
	return ""
}

func (m *QuerySubjectsByStewardRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySubjectsByStewardResponse is the Query/SubjectsBySteward response type.
type QuerySubjectsByStewardResponse struct {
	// steward is the address of the subject steward.
	Steward string `protobuf:"bytes,1,opt,name=steward,proto3" json:"steward,omitempty"`
	// subjects is the list of subjects managed by the steward.
	Subjects []*QuerySubjectsByStewardResponse_Subject `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// pagination is the pagination of the response.
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySubjectsByStewardResponse) Reset()         { *m = QuerySubjectsByStewardResponse{} }
func (m *QuerySubjectsByStewardResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsByStewardResponse) ProtoMessage()    {}
func (*QuerySubjectsByStewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ecf46bf2d90f7b, []int{5}
}
func (m *QuerySubjectsByStewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsByStewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsByStewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsByStewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsByStewardResponse.Merge(m, src)
}
func (m *QuerySubjectsByStewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsByStewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsByStewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsByStewardResponse proto.InternalMessageInfo

func (m *QuerySubjectsByStewardResponse) GetSteward() string {
	if m != nil {
		return m.Steward
	}
	return ""
}

func (m *QuerySubjectsByStewardResponse) GetSubjects() []*QuerySubjectsByStewardResponse_Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *QuerySubjectsByStewardResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// Subject is the subject properties.
type QuerySubjectsByStewardResponse_Subject struct {
	// address is the address of the subject.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// metadata is the metadata of the subject.
	Metadata string `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *QuerySubjectsByStewardResponse_Subject) Reset() {
	*m = QuerySubjectsByStewardResponse_Subject{}
}
func (m *QuerySubjectsByStewardResponse_Subject) String() string { return proto.CompactTextString(m) }
func (*QuerySubjectsByStewardResponse_Subject) ProtoMessage()    {}
func (*QuerySubjectsByStewardResponse_Subject) Descriptor() ([]byte, []int) {
	return fileDescriptor_72ecf46bf2d90f7b, []int{5, 0}
}
func (m *QuerySubjectsByStewardResponse_Subject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubjectsByStewardResponse_Subject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubjectsByStewardResponse_Subject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubjectsByStewardResponse_Subject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubjectsByStewardResponse_Subject.Merge(m, src)
}
func (m *QuerySubjectsByStewardResponse_Subject) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubjectsByStewardResponse_Subject) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubjectsByStewardResponse_Subject.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubjectsByStewardResponse_Subject proto.InternalMessageInfo

func (m *QuerySubjectsByStewardResponse_Subject) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QuerySubjectsByStewardResponse_Subject) GetMetadata() string {
	if m != nil {
		return m.Metadata
	}
	return ""
}

func init() {
	proto.RegisterType((*QuerySubjectRequest)(nil), "chora.subject.v1.QuerySubjectRequest")
	proto.RegisterType((*QuerySubjectResponse)(nil), "chora.subject.v1.QuerySubjectResponse")
	proto.RegisterType((*QuerySubjectsRequest)(nil), "chora.subject.v1.QuerySubjectsRequest")
	proto.RegisterType((*QuerySubjectsResponse)(nil), "chora.subject.v1.QuerySubjectsResponse")
	proto.RegisterType((*QuerySubjectsResponse_Subject)(nil), "chora.subject.v1.QuerySubjectsResponse.Subject")
	proto.RegisterType((*QuerySubjectsByStewardRequest)(nil), "chora.subject.v1.QuerySubjectsByStewardRequest")
	proto.RegisterType((*QuerySubjectsByStewardResponse)(nil), "chora.subject.v1.QuerySubjectsByStewardResponse")
	proto.RegisterType((*QuerySubjectsByStewardResponse_Subject)(nil), "chora.subject.v1.QuerySubjectsByStewardResponse.Subject")
}

func init() { proto.RegisterFile("chora/subject/v1/query.proto", fileDescriptor_72ecf46bf2d90f7b) }

var fileDescriptor_72ecf46bf2d90f7b = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x86, 0xeb, 0x54, 0xb0, 0xe2, 0x5d, 0xc0, 0x80, 0x54, 0x45, 0x25, 0x42, 0x41, 0xeb, 0x06,
	0xa8, 0x36, 0x2d, 0x07, 0xb8, 0x21, 0x0d, 0x69, 0x1c, 0xb8, 0x40, 0xc7, 0x05, 0x0e, 0x48, 0x4e,
	0x63, 0xb2, 0x20, 0x1a, 0x67, 0xb1, 0x5b, 0x54, 0x4d, 0x13, 0x02, 0x09, 0x89, 0x23, 0x12, 0x37,
	0xfe, 0x04, 0xff, 0x81, 0x13, 0xc7, 0x49, 0x5c, 0x38, 0xa2, 0x96, 0x1f, 0x82, 0x62, 0x3b, 0x6d,
	0xb2, 0x2e, 0xa4, 0x4c, 0xbb, 0xc5, 0xfa, 0xf2, 0xbd, 0x7e, 0xbe, 0xf7, 0xb5, 0x0d, 0x5b, 0x83,
	0x3d, 0x9e, 0x50, 0x22, 0x46, 0xde, 0x6b, 0x36, 0x90, 0x64, 0xdc, 0x25, 0xfb, 0x23, 0x96, 0x4c,
	0x70, 0x9c, 0x70, 0xc9, 0xd1, 0x45, 0x55, 0xc5, 0xa6, 0x8a, 0xc7, 0x5d, 0xfb, 0xd6, 0x80, 0x8b,
	0x21, 0x17, 0xc4, 0xa3, 0x82, 0xe9, 0x5f, 0xc9, 0xb8, 0xeb, 0x31, 0x49, 0xbb, 0x24, 0xa6, 0x41,
	0x18, 0x51, 0x19, 0xf2, 0x48, 0x77, 0xdb, 0xad, 0x80, 0xf3, 0xe0, 0x0d, 0x23, 0x34, 0x0e, 0x09,
	0x8d, 0x22, 0x2e, 0x55, 0x51, 0xe8, 0xaa, 0x4b, 0xe0, 0xe5, 0xa7, 0x69, 0xff, 0xae, 0x16, 0xef,
	0xb3, 0xfd, 0x11, 0x13, 0x12, 0x35, 0xe1, 0x1a, 0xf5, 0xfd, 0x84, 0x09, 0xd1, 0x04, 0xd7, 0xc1,
	0xd6, 0x85, 0x7e, 0xb6, 0x74, 0x5f, 0xc1, 0x2b, 0xc5, 0x06, 0x11, 0xf3, 0x48, 0xb0, 0xf2, 0x8e,
	0xb4, 0x22, 0x24, 0x7b, 0x4b, 0x13, 0xbf, 0x69, 0xe9, 0x8a, 0x59, 0x22, 0x1b, 0x36, 0x86, 0x4c,
	0x52, 0x9f, 0x4a, 0xda, 0xac, 0xab, 0xd2, 0x7c, 0xed, 0xbe, 0x2c, 0xee, 0x23, 0x32, 0xb2, 0x1d,
	0x08, 0x17, 0x23, 0xaa, 0xad, 0xd6, 0x7b, 0x6d, 0xac, 0xfd, 0xc0, 0xa9, 0x1f, 0x58, 0x5b, 0x67,
	0xfc, 0xc0, 0x4f, 0x68, 0xc0, 0x4c, 0x6f, 0x3f, 0xd7, 0xe9, 0x7e, 0xb2, 0xe0, 0xd5, 0x63, 0x1b,
	0x98, 0x49, 0x1e, 0xc3, 0x86, 0xb1, 0x3a, 0x1d, 0xa5, 0xbe, 0xb5, 0xde, 0x23, 0xf8, 0x78, 0x02,
	0xf8, 0xc4, 0x56, 0x9c, 0x99, 0x32, 0x17, 0x40, 0x8f, 0x0a, 0xb8, 0x96, 0xc2, 0xdd, 0xac, 0xc4,
	0xd5, 0x72, 0x79, 0x5e, 0xfb, 0x39, 0x5c, 0x33, 0xea, 0x67, 0x6e, 0xf5, 0x7b, 0x00, 0xaf, 0x15,
	0xe6, 0xd9, 0x9e, 0xec, 0xea, 0xb6, 0xdc, 0x71, 0xc8, 0x74, 0x41, 0x51, 0x77, 0xe7, 0x84, 0xf9,
	0x4e, 0x13, 0xc7, 0x57, 0x0b, 0x3a, 0x65, 0x0c, 0x8b, 0x13, 0x56, 0x02, 0xf1, 0x2c, 0x97, 0x98,
	0xa5, 0x12, 0xbb, 0x5f, 0x91, 0xd8, 0x92, 0x7a, 0x65, 0x74, 0xf5, 0xd3, 0x47, 0xf7, 0x60, 0x95,
	0xe8, 0xf2, 0x01, 0x59, 0xc5, 0x80, 0x7a, 0xdf, 0xeb, 0xf0, 0x9c, 0xc2, 0x47, 0x1f, 0xc1, 0x42,
	0x6b, 0xe3, 0xdf, 0x33, 0x1a, 0x97, 0xed, 0x76, 0xd5, 0x6f, 0x9a, 0xd8, 0xbd, 0xfd, 0xe1, 0xe7,
	0x9f, 0x2f, 0xd6, 0x06, 0xba, 0x41, 0x96, 0x1e, 0xa3, 0xec, 0xf3, 0xc0, 0xc0, 0x1e, 0xa2, 0x77,
	0xb0, 0x91, 0x59, 0x89, 0xda, 0x95, 0xb7, 0x43, 0x83, 0x6c, 0xae, 0x78, 0x8b, 0x5c, 0x57, 0x91,
	0xb4, 0x90, 0x5d, 0x4a, 0x22, 0xd0, 0x37, 0x00, 0x2f, 0x2d, 0x85, 0x89, 0xc8, 0xea, 0xb1, 0x6b,
	0xa6, 0x3b, 0xff, 0x7b, 0x4e, 0xdc, 0x7b, 0x0a, 0xae, 0x8b, 0x48, 0x39, 0x5c, 0xc7, 0x9b, 0x74,
	0xcc, 0xd1, 0x24, 0x07, 0xe6, 0xe3, 0x70, 0xfb, 0xe1, 0x8f, 0xa9, 0x03, 0x8e, 0xa6, 0x0e, 0xf8,
	0x3d, 0x75, 0xc0, 0xe7, 0x99, 0x53, 0x3b, 0x9a, 0x39, 0xb5, 0x5f, 0x33, 0xa7, 0xf6, 0xe2, 0x66,
	0x10, 0xca, 0xbd, 0x91, 0x87, 0x07, 0x7c, 0xa8, 0x45, 0x3b, 0x21, 0x27, 0x43, 0xee, 0x8b, 0xb9,
	0xb8, 0x9c, 0xc4, 0x4c, 0xa4, 0x4f, 0xfc, 0x79, 0xf5, 0x6a, 0xdf, 0xfd, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0x6e, 0xf6, 0x0b, 0x14, 0x31, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Subject queries an subject by address.
	Subject(ctx context.Context, in *QuerySubjectRequest, opts ...grpc.CallOption) (*QuerySubjectResponse, error)
	// Subjects queries all subjects.
	Subjects(ctx context.Context, in *QuerySubjectsRequest, opts ...grpc.CallOption) (*QuerySubjectsResponse, error)
	// SubjectsBySteward queries subjects by steward.
	SubjectsBySteward(ctx context.Context, in *QuerySubjectsByStewardRequest, opts ...grpc.CallOption) (*QuerySubjectsByStewardResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Subject(ctx context.Context, in *QuerySubjectRequest, opts ...grpc.CallOption) (*QuerySubjectResponse, error) {
	out := new(QuerySubjectResponse)
	err := c.cc.Invoke(ctx, "/chora.subject.v1.Query/Subject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Subjects(ctx context.Context, in *QuerySubjectsRequest, opts ...grpc.CallOption) (*QuerySubjectsResponse, error) {
	out := new(QuerySubjectsResponse)
	err := c.cc.Invoke(ctx, "/chora.subject.v1.Query/Subjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubjectsBySteward(ctx context.Context, in *QuerySubjectsByStewardRequest, opts ...grpc.CallOption) (*QuerySubjectsByStewardResponse, error) {
	out := new(QuerySubjectsByStewardResponse)
	err := c.cc.Invoke(ctx, "/chora.subject.v1.Query/SubjectsBySteward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Subject queries an subject by address.
	Subject(context.Context, *QuerySubjectRequest) (*QuerySubjectResponse, error)
	// Subjects queries all subjects.
	Subjects(context.Context, *QuerySubjectsRequest) (*QuerySubjectsResponse, error)
	// SubjectsBySteward queries subjects by steward.
	SubjectsBySteward(context.Context, *QuerySubjectsByStewardRequest) (*QuerySubjectsByStewardResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Subject(ctx context.Context, req *QuerySubjectRequest) (*QuerySubjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subject not implemented")
}
func (*UnimplementedQueryServer) Subjects(ctx context.Context, req *QuerySubjectsRequest) (*QuerySubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subjects not implemented")
}
func (*UnimplementedQueryServer) SubjectsBySteward(ctx context.Context, req *QuerySubjectsByStewardRequest) (*QuerySubjectsByStewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubjectsBySteward not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Subject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chora.subject.v1.Query/Subject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subject(ctx, req.(*QuerySubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Subjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Subjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chora.subject.v1.Query/Subjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Subjects(ctx, req.(*QuerySubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubjectsBySteward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubjectsByStewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubjectsBySteward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chora.subject.v1.Query/SubjectsBySteward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubjectsBySteward(ctx, req.(*QuerySubjectsByStewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chora.subject.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subject",
			Handler:    _Query_Subject_Handler,
		},
		{
			MethodName: "Subjects",
			Handler:    _Query_Subjects_Handler,
		},
		{
			MethodName: "SubjectsBySteward",
			Handler:    _Query_SubjectsBySteward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chora/subject/v1/query.proto",
}

func (m *QuerySubjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Steward) > 0 {
		i -= len(m.Steward)
		copy(dAtA[i:], m.Steward)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Steward)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsResponse_Subject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsResponse_Subject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsResponse_Subject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Steward) > 0 {
		i -= len(m.Steward)
		copy(dAtA[i:], m.Steward)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Steward)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsByStewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsByStewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsByStewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Steward) > 0 {
		i -= len(m.Steward)
		copy(dAtA[i:], m.Steward)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Steward)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsByStewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsByStewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsByStewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Steward) > 0 {
		i -= len(m.Steward)
		copy(dAtA[i:], m.Steward)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Steward)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubjectsByStewardResponse_Subject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubjectsByStewardResponse_Subject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubjectsByStewardResponse_Subject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySubjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Steward)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsResponse_Subject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Steward)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsByStewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Steward)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsByStewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Steward)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubjectsByStewardResponse_Subject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySubjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &QuerySubjectsResponse_Subject{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsResponse_Subject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsByStewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectsByStewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectsByStewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsByStewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubjectsByStewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubjectsByStewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Steward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Steward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &QuerySubjectsByStewardResponse_Subject{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubjectsByStewardResponse_Subject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
