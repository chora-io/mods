// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package governorv1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type GovernorTable interface {
	Insert(ctx context.Context, governor *Governor) error
	Update(ctx context.Context, governor *Governor) error
	Save(ctx context.Context, governor *Governor) error
	Delete(ctx context.Context, governor *Governor) error
	Has(ctx context.Context, governor string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, governor string) (*Governor, error)
	List(ctx context.Context, prefixKey GovernorIndexKey, opts ...ormlist.Option) (GovernorIterator, error)
	ListRange(ctx context.Context, from, to GovernorIndexKey, opts ...ormlist.Option) (GovernorIterator, error)
	DeleteBy(ctx context.Context, prefixKey GovernorIndexKey) error
	DeleteRange(ctx context.Context, from, to GovernorIndexKey) error

	doNotImplement()
}

type GovernorIterator struct {
	ormtable.Iterator
}

func (i GovernorIterator) Value() (*Governor, error) {
	var governor Governor
	err := i.UnmarshalMessage(&governor)
	return &governor, err
}

type GovernorIndexKey interface {
	id() uint32
	values() []interface{}
	governorIndexKey()
}

// primary key starting index..
type GovernorPrimaryKey = GovernorGovernorIndexKey

type GovernorGovernorIndexKey struct {
	vs []interface{}
}

func (x GovernorGovernorIndexKey) id() uint32            { return 0 }
func (x GovernorGovernorIndexKey) values() []interface{} { return x.vs }
func (x GovernorGovernorIndexKey) governorIndexKey()     {}

func (this GovernorGovernorIndexKey) WithGovernor(governor string) GovernorGovernorIndexKey {
	this.vs = []interface{}{governor}
	return this
}

type governorTable struct {
	table ormtable.Table
}

func (this governorTable) Insert(ctx context.Context, governor *Governor) error {
	return this.table.Insert(ctx, governor)
}

func (this governorTable) Update(ctx context.Context, governor *Governor) error {
	return this.table.Update(ctx, governor)
}

func (this governorTable) Save(ctx context.Context, governor *Governor) error {
	return this.table.Save(ctx, governor)
}

func (this governorTable) Delete(ctx context.Context, governor *Governor) error {
	return this.table.Delete(ctx, governor)
}

func (this governorTable) Has(ctx context.Context, governor string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, governor)
}

func (this governorTable) Get(ctx context.Context, governor string) (*Governor, error) {
	var governor Governor
	found, err := this.table.PrimaryKey().Get(ctx, &governor, governor)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &governor, nil
}

func (this governorTable) List(ctx context.Context, prefixKey GovernorIndexKey, opts ...ormlist.Option) (GovernorIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return GovernorIterator{it}, err
}

func (this governorTable) ListRange(ctx context.Context, from, to GovernorIndexKey, opts ...ormlist.Option) (GovernorIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return GovernorIterator{it}, err
}

func (this governorTable) DeleteBy(ctx context.Context, prefixKey GovernorIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this governorTable) DeleteRange(ctx context.Context, from, to GovernorIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this governorTable) doNotImplement() {}

var _ GovernorTable = governorTable{}

func NewGovernorTable(db ormtable.Schema) (GovernorTable, error) {
	table := db.GetTable(&Governor{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Governor{}).ProtoReflect().Descriptor().FullName()))
	}
	return governorTable{table}, nil
}

type StateStore interface {
	GovernorTable() GovernorTable

	doNotImplement()
}

type stateStore struct {
	governor GovernorTable
}

func (x stateStore) GovernorTable() GovernorTable {
	return x.governor
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	governorTable, err := NewGovernorTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		governorTable,
	}, nil
}
